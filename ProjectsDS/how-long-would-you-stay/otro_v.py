# -*- coding: utf-8 -*-
"""otro_v.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kFOIobExgXwAWqNtKU-E10-8LsZbc4g6

columns_meaning.csv: this file will help you to understand your data

sample_submission.csv: your submission should be something like this, same columns, same shape, same id, differents days ðŸ’ª

train_set.csv: this is the bit you'll work with in order to get the best model

test_set.csv: use it ONLY to make the prediction
"""

import pandas as pd
import numpy as np
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
from sklearn import linear_model
# la otra forma, pero lo mismo: from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

import warnings
warnings.filterwarnings('ignore')

plt.rcParams["figure.figsize"] = (10,8)
# Load libraries

from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.pipeline import Pipeline
from sklearn.model_selection import RepeatedKFold, KFold
from sklearn.preprocessing import LabelEncoder 
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import cross_val_score
from pandas_profiling import ProfileReport

# progress bar 
from tqdm import tqdm

df = pd.read_csv("../Desktop/competi_kaggle/dekaggle/healthcare/output/train_set.csv")

df

df.columns

df.info()

df.isnull().values.any()

df.isnull().sum()

df2 = df.fillna(0)
df2

df2.isnull()

df2.drop("0",1,inplace = True)

df2.drop(['1','3'], 1, inplace = True)

df2

df2.info()

corrMatrix = df2.corr()
sns.heatmap(corrMatrix, annot=True)
plt.show()

le = LabelEncoder()
# Converting string labels into numbers.
df[['2']] = le.fit_transform(df[['2']])
# Sunny: 2, Overcast: 0, Rainy:1
print(df['2'])

le = LabelEncoder()
# Converting string labels into numbers.
df[['4']] = le.fit_transform(df[['4']])
print(df['4'])

le = LabelEncoder()
df['6'] = le.fit_transform(df['6'])
print(df['6'])

le = LabelEncoder()
df['7'] = le.fit_transform(df['7'])
print(df['7'])

le = LabelEncoder()
df['8'] = le.fit_transform(df['8'])
print(df['8'])

le = LabelEncoder()
df['12'] = le.fit_transform(df['12'])
print(df['12'])

le = LabelEncoder()
df['13'] = le.fit_transform(df['13'])
print(df['13'])

le = LabelEncoder()
df['15'] = le.fit_transform(df['15'])
print(df['15'])

le_17 = LabelEncoder()
df['17'] = le_17.fit_transform(df['17'])
print(df['17'])

df

# ten cuidado que df2 no tiene los valores codificados con LabelEncoder
df2

"""Definir X e y"""

def clean_dataset(df):
    assert isinstance(df, pd.DataFrame), "df needs to be a pd.DataFrame"
    df.dropna(inplace=True)
    indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).any(1)
    return df[indices_to_keep].astype(np.float64)

df = clean_dataset(df)
df

X = np.array(df.iloc[:,0:-1])
y = np.array(df['17'])
X.shape

y.shape

"""The goal of this competition is the prediction of the days a patient would stay in the hospital given some characteristics, putting into practice all the machine learning techniques you've learn.

The length of stay is divided into 11 different classes ranging from 0-10 days to more than 100 days.
"""

df.isnull().values.any()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)

model = linear_model.LogisticRegression()

df.isnull().sum()

model.fit(X_train, y_train)

predictions = model.predict(X_test)
print(predictions)

# ocurre este error IndexError: arrays used as indices must be of integer (or boolean) type
# porque la predicciÃ³n: "predictions" son float, por lo que primero de todo habrÃ¡ que pasar ese array a integer
predictions = predictions.astype(int)

prediction_test = le_17.inverse_transform(predictions)

prediction_test

model.score(X_test,y_test)

# no entiendo quÃ© hace esto
print(df.shape)
index = 0
for i in df[['2','4', '5', '6', '7', '8', '9', '10', '11', '12',
       '13', '14', '15', '16', '17']]:
    if i == 'float64':
        print(index, i)
    index +=1

index

"""Predict"""

to_pred = pd.read_csv("../Desktop/competi_kaggle/dekaggle/healthcare/output/test_set.csv")
to_pred

to_pred = to_pred.fillna(0)

to_pred.shape

to_pred.info()

'''
le = preprocessing.LabelEncoder()
# Converting string labels into numbers.
to_pred[['2']] = le.fit_transform(to_pred[['2']])
# Sunny: 2, Overcast: 0, Rainy:1
print(to_pred['2'])
'''

for i in to_pred[['2','4','6', '7', '8', '12','13', '15']]:
    le = LabelEncoder()
    to_pred[i] = le.fit_transform(to_pred[i])

to_pred

predicti_to_pred = model.predict(to_pred)
predicti_to_pred

submission = le_17.inverse_transform(predicti_to_pred.astype(int))
submission

#list(le.classes_)

'''
le.transform(['0-10',
 '11-20',
 '21-30',
 '31-40',
 '41-50',
 '51-60',
 '61-70',
 '71-80',
 '81-90',
 '91-100'])
'''

#list(le.inverse_transform([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))

#predictions_submit = model.predict(to_pred)
#predictions_submit

#predictions_submit.shape

'''
for i in predictions_submit[['4','6', '7', '8', '12',
       '13', '15']]:
    le = preprocessing.LabelEncoder()
# Converting string labels into numbers.
    predictions_submit[i] = le.inverse_transform(predictions_submit[i])
# Sunny: 2, Overcast: 0, Rainy:1
    print(predictions_submit[i])
'''

#predictions_submit.reshape(-1,1)

#predictions_submit(le.inverse_transform(y))

#predictions_submit.fit_transform(predictions_submit)

submission = pd.DataFrame({"id": to_pred["0"], "days": submission})
submission

sample = pd.read_csv('../Desktop/competi_kaggle/dekaggle/healthcare/output/sample_submission.csv')

sample.shape

if submission.shape == sample.shape:
    if submission.columns.all() == sample.columns.all():
        if submission.id.all() == sample.id.all():
            print("you're ready to submit!")
            submission.to_csv("to_submit.csv", index = False)

